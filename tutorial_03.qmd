---
title: "Tutorial 3: Spectral Windows, Scenes and Optical Properties"
---

```{julia}
# Some set-up for this document
using Revise
using Pkg;
Pkg.activate("/Users/psomkuti/Work/G3RT.jl");
using G3RT;
using Plots; default(fontfamily="cmss");
using Unitful;
```


# Introduction

In the previous tutorial ([Tutorial 2](./tutorial_02.qmd)), we have learned about atmospheres and which types of profiles and other objects they contain. Further, we have learned about the importance of dealing with physical units correctly, such that G3RT can correctly do the necessary unit conversions for us.

::: {.callout-tip title="Goal of this tutorial"}
In this tutorial we will move to creating an actual retrieval scene, and define the extent of our spectral region of interest. This provides us with everything needed to peform some basic calculations that we then use to produce top-of-atmosphere radiances. We will also learn how G3RT internally links objects of interest to establish some of the needed relationships between them.
:::

# Spectral Windows

## Introduction

During the beginning stages of setting up a trace gas retrieval algorithm, we must choose the so-called spectral windows. Possibly known as "fitting windows" or just "windows", we mean a contiguous section of the spectral dimension, be it wavelength or wavenumber. G3RT supports an arbitrary number of spectral windows that can be used for retrievals, and, apart from memory limitations, they can be of any size - so both micro-windows and larger broad-band windows are supported.

Spectral windows are best defined very early in the retrieval application, since many other G3RT objects depend on it. The type structure itself is relatively straightforward: we have to give a name, which is purely for labelling purposes, and then provide the lower and upper limits in either wavelength or wavenumber space. The wavelength or wavenumber limits (denoted here as `ww_min` and `ww_max`) represent the "what the user wants" spectral boundaries. The third argument, `ww_grid` is the underlying high-resolution grid. Users can freely choose this grid, it can have regular or irregular intervals, however it must extend beyond the spectral limits as given by `ww_min` and `ww_max`. The fourth argument (`ww_unit`) now defines the units of the spectral grid, and can be any length-type unit (for wavelengths), or any wavenumber unit (inverse length). Finally, the last argument defines a so-called reference point (`ww_reference`): this is a quantity used for a number of wavelength- (or wavenumber-) dependent objects. For example, if we want to define a surface reflectance that varies spectrally over the range of the spectral window, we likely need a reference point to anchor some polynomial expression.

Below is the list of type fields for the `SpectralWindow` type. Note that the basic constructor (the function that is called when you type `G3RT.SpectralWindow(...)`) does not require the `N_hires` field to be supplied, since it is automatically calculated from the supplied `ww_grid` parameter.

::: {.callout-note title="SpectralWindow"}
```{julia}
#| echo: false
@doc G3RT.SpectralWindow
```
:::

It is easier to understand the workings of the `SpectralWindow` type by example. First, we simply create a new object by calling the type constructor. The example below creates a window that is 1 nm wide with a rather crude spacing of 0.1 nm for demonstration purposes.

```{julia}
wl_unit = u"nm"
wl_min = 759.95
wl_max = 760.25
wl_buffer = 0.03
wl_spacing= 0.01
wl_grid = collect(wl_min-wl_buffer:wl_spacing:wl_max+wl_buffer+wl_spacing)

swin1 = G3RT.SpectralWindow(
    "O2A", # Label
    wl_min, # Lower wavelength limit
    wl_max, # Upper wavelength limit
    wl_grid, # Hires-grid
    wl_unit, # Wavelength unit
    (wl_min + wl_max) / 2 # Reference at center
)
```

We can peek into the `swin1` object as usual, for example we can look at the actual underlying wavelength grid.

```{julia}
show(swin1.ww_grid)
```

The role of the wavelength grid is quite important: all optical property and radiative transfer calculations will be performed on that grid. Overall computing performance tends to scale linearly with the number of points in the spectral grid - so doubling the number of points of the spectral window rougly leads to a doubling of the overall forward model execution time.

## Wavelengths and Wavenumbers

G3RT supports both wavelength and wavenumbers as choices for the spectral dimension natively. Additional details are also found in the G3RT documentation at [ADD LINK].

Users should be able to access the spectral dimension in an explicit way that reflects their initial choice and that helps other users to be constantly aware of whether this particular bit of code was intended for wavelength or wavenumber space. We can access the wavelength-based grid in `swin1` as we have done above (`swin1.ww_grid`), but it is much cleaner to write `.wavelength_grid`!

```{julia}
show(swin1.wavelength_grid)
```
```{julia}
show(swin1.λ_grid)
```

With both the unicode lowercase "lambda" (`λ_grid`) and `wavelength_grid` we can access the underlying wavelength grid. The same holds for wavenumber-based spectral windows. Let us define a new window:

```{julia}
wn_unit = u"cm^-1"
wn_min = 5000.0
wn_max = 5001.0
wn_buffer = 0.1
wn_spacing= 0.01
wn_grid = collect(wn_min-wn_buffer:wn_spacing:wn_max+wn_buffer)

swin2 = G3RT.SpectralWindow(
    "just_test", # Label
    wn_min, # Lower wavenumber limit
    wn_max, # Upper wavenumber limit
    wn_grid, # Hires-grid
    wn_unit, # Wavenumber unit
    (wn_min + wn_max) / 2 # Reference at center
)

```

and now access the underlying grid using `wavenumber_grid` or the lower case greek nu `ν_grid`:
```{julia}
show(swin2.wavenumber_grid)
```
```{julia}
show(swin2.ν_grid)
```

Now what would happen if we tried to access a wavelength-based grid using `ν` or `wavenumber`?

```{julia}
#| error: true
swin1.wavenumber_grid
```

We receive an error! G3RT clearly is aware of the fact that `swin1` was created with a wavelength-compatible unit and throws an error if we attempt to access the underlying grid with a symbol that was meant for wavenumber-compatible objects. This is very deliberate design! Users are encouraged to use `wavenumber_grid` or `wavelength_grid` in their codes as to make it clear that it was designed to operate in that particular spectral space. In applications where wavelength and wavenumber are expected to switch often, using `ww_grid` might be appropriate.

Within G3RT, the string `ww` has a special meaning when it comes to type fields. It signals that users can access any quantity that contains `ww` fully or partially as a type field, using `wavelength` (or `λ`) or `wavenumber` (or `ν`) by replacing `ww` with the appropriate symbol. For example, `swin1.ww_min`, `swin1.wavelength_min` and `swin1.λ_min` all access the same object field.

::: {.callout-tip}
Every G3RT type field that starts with `ww` is intended to be used in either wavelength or wavenumber space! Users can access those fields by replacing the `ww` part of the type field symbol with either `wavelength` or `λ` for length-compatible spectral units (such as µm), or with either `wavenumber` or `ν` for wavenumber-compatible spectral units (such as cm^-1). For example, the type field `.ww_unit` can be equivalently accessed as `.ν_unit` if the object was created with a wavenumber-compatible unit! There are no known significant performance penalties to doing so.
:::

## Illustration of a Spectral Window and its Relationship to Spectral Samples

In @fig-specwin_disp, we can see the components of a spectral window, and in this case we have chosen wavelength space for the spectral dimension.

The blue line with triangle-shaped markers represents a measurement which is discretized in the spectral dimension into **spectral samples**. Counting up all triangles in @fig-specwin_disp, there are 30 spectral samples visible in this plot.

When choosing the limits of the spectral window, we usually do that based on the inclusion or exclusion of features in the absorption spectrum. Here, the choice is (without further meaning, just as an example) that we include an absorption feature at ~760.1 nm as well as the surrounding two "humps". The vertical, gray lines indicate the location of the window limits, as stored in the `.wavelength_min` and `.wavelength_max` fields. This window contains 18 spectral samples of the measurement. The red dots that overlap the x-axis represent an illustration of the high-resolution grid that is stored in `.wavelength_grid` - these are the spectral points at which the model spectrum will be evaluated. Finally, the gray, dashed line at 760.1 nm represents the reference wavelength `.wavelength_ref`, which we chose to be at the center of the spectral window. Note that the reference wavelength can be any wavelength and it does not need to be inside the spectral window. Usually, the spectral window center or one of the limits is a convenient choice.

![Illustrating the main components of a spectral window, and how they relate to a measurement (blue triangles).](figures/specwin_disp.svg){#fig-specwin_disp}

Also note that the high-resolution grid does not need to line up at all with the spectral window limits - it just happens to be due to the way we constructed the window. We see the high-resolution grid extend a few intervals beyond the limits - this is required for a successful retrieval! When the instrument spectral response function is applied later on, the high-resolution grid must contain enough data in the spectral dimension such that a forward computation for every spectral sample (blue triangle) can be calculated. Below is an illustration to better visualize this concept (@fig-specwin_limit).

![This figure illustrates the neccessity of the high-resolution grid (red dots) to extend beyond the lower wavelength limit of the window (gray vertical line). An example spectral sample (blue triangle) takes spectral contributions from outside the window limits due to the finite width of the spectral response function (ISRF, black), so we must have model calculations for those out-of-window wavelengths.](figures/specwin_limit.svg){#fig-specwin_limit}

# Scenes

## First Step Towards Scenes

We now ready to move up yet another level in the G3RT hiearchy and create a so-called *scene*. Conceptually, a scene is meant to describe state of the atmosphere and surface(s) along with a number of additional parameters which puts that state into context with the observing instrument (or the measurement).

The most important component of the scene is the atmosphere, which we have discussed in the previous tutorial ([Tutorial 2](./tutorial_02.qmd)). It contains the set-up for our vertical retrieval grid, meteorological profiles, gases and other constituents.

Along with the atmosphere, we must also define the surface state(s). At the moment, G3RT requires a surface object to be attached to every spectral window that will be considered. We can easily instantiate a new Lambertian surface with the following code:

```{julia}
surf = G3RT.LambertianPolynomialSurface(swin1, [0.25])
```

We must assign the surface to a spectral window, which is the first argument. The second argument in this function is the list of polynomial coefficients. For the sake of simplicity we create a spectrally flat surface, and thus only need one polynomial coefficient - the zeroth order value. The `LambertianPolynomialSurface` surface type might at a later stage trigger the calculation of surface reflecticity for all high-res spectral points for the spectral window, which requires the evaluation of the albedo $\rho$ at all spectral points:

$$
\rho(\lambda) = \sum_{i=0}^{N-1} (\lambda - \lambda_\mathrm{ref})^i
$$

The reference wavelength $\lambda_\mathrm{ref}$ will be taken from the `swin1.ww_reference` field.

At first glance, it seems like a circular dependency, but the scene object we want to create later on requires a so-called dictionary that maps a spectral window onto a surface:

```{julia}
surf_dict = Dict(swin1 => surf)
```

The next short section explains how dictionaries in Julia work, and why they are a useful tool for G3RT. Even experienced Julia users might want to read through this sub-section.

## Intermission: Dictionaries in Julia

Dictionaries in Julia work exactly like those in e.g. Python: they allow one to store the relationship between key and value pairs, mostly for the purpose of accessing some value with a given key. They can be easily created via typing e.g.

```{julia}
d1 = Dict("key1" => 1, "key2" => 3)
```

In Julia, dictionaries are objects of types, so in the example above we have created a dictionary that maps strings onto integers. This is quite different when compared to Python. If we attempt to store a new key-value pair in this already existing dictionary, we find that it only works if we provide a string-based key and an integer-based value (or one that can be implicity converted to one)!

```{julia}
#| error: true

d1["key3"] = 8 # This works
d1["key4"] = 1.0 # This works too (conversion float -> integer succeeds)

d1[10] = "key5" # This does not (integer -> string fails, string -> float fails)
```

If we want to create a dictionary that allows us to use any type for either key or value, we must initially create it as such:

```{julia}
d2 = Dict{Any,Any}()
d2["key1"] = 123
d2[3.2] = "test"
d2[(10, 'a')] = sin

d2
```

The dictionary `d2` can be populated with almost anything now - the example above shows a string mapped to an integer (`"key1" => 1`), a 64-bit float mapped to a string (`3.2 => "test`), and finally a tuple mapped to a function (`(10, 'a') => sin`)!

As always, when it comes to codes that are required to perform very efficiently, one would be wise to steer clear of any data type with `Any`, since the Julia compiler cannot dispatch specific functions for good performance. However, for most applications the performance for `Any`-type dictionaries is usually good enough and can be a very convenient way of organizing relationships.

One can iterate over dictionaries in the following way:

```{julia}
for (k,v) in d1 # The braces around k,v are required!
    println("Key $(k) and Value $(v)")
end
```

We can already notice something interesting! The order in which the key-value pairs are read out is not the same as the order in which they were added to the dictionary! This is a very important detail about dictionaries in Julia: they are, as of writing of this document, not ordered by insertion and there is no guarantee that the order is preserved between executions of the script. If users need that functionality, there is a Julia package [OrderedCollections.jl](https://juliacollections.github.io/OrderedCollections.jl/latest/ordered_containers.html), which implements an order-preserving dictionary type.

:::{.callout-warning}
Dictionaries in Python (3.7 and up) preserve the order of insertion! In Julia, this is not the case, and the **iteration order is not guaranteed!**
:::

In many scripting applications, we would use dictionaries in a manner like above where we link strings or integers to other, generally simple objects. In Julia, many more types can be used as dictionary keys, not just numbers, strings or tuples. We can even use our own types! We will use a quick example by creating two new custom types, and use variables of those types as keys in dictionaries.

```{julia}
struct SS1
    x
end
struct SS2
    y
end
s1 = SS1([1,2,3])
s2 = SS2([4,5,6])

test_dict = Dict(s1 => "I am s1", s2 => "I am s2")
```

These are very simple user types that take one argument each. We can access the contents of the dictionary as follows:

```{julia}
test_dict[s1]
```

This feels like expected behavior! We have created a dictionary with some keys, one of those keys is indeed our newly created object `s1`, so we should be able to access the value `"I am s1`" inside `test_dict` simply by writing `test_dict[s1]`. And we see that it works.

Let us try something very similar: we will create a new object, that is seeminly the same object, and try to access the dictonary in exactly the same way. However, we will see that Julia raises an error!

```{julia}
#| error: true
s3 = SS1([1,2,3])
test_dict[s3]
```

The underlying reason as to why the above code raises an error is **very important to understand**! Julia dictionaries are, just like in Python, hash tables. We can use Julia's `Base.hash` function to calculate the hash value of our variables `s1` and `s3`, as well as another object that we just create:

```{julia}
display(Base.hash(s1))
display(Base.hash(s3))
display(Base.hash(SS1([1,2,3])))
```

Even though all three objects have the same contents in the sense that the values of the arrays `[1,2,3]` are the same, they produce different hash values! This is due to the fact that the creation of the array `[1,2,3]` happens on stack memory. So whenever we type `[1,2,3]` a new array is created at some different part of the memory that is available to Julia.

If wanted, we can circumvent this by first creating an array, and *afterwards* create two objects with that array as the argument:

```{julia}
a = [1,2,3]
s4 = SS1(a)
s5 = SS1(a)

display(hash(s4))
display(hash(s5))
```

We see that the hash value for both `s4` and `s5` is the same, and Julia cannot differentiate those two objects at all. Therefore, we could use either to access a dictionary:

```{julia}
test_dict2 = Dict(s4 => "I am s4")
test_dict2[s5]
```

## Moving On To Scenes

Returning back to where we left off before the intermission. There, we created a dictionary that maps our `swin1` object of type `SpectralWindow` onto the Lambertian surface that we also created beforehand.

```{julia}
surf_dict = Dict(swin1 => surf)
```

We now understand how `surf_dict` can be used to access the `surf` object via `swin1`. Spectral windows in G3RT have arrays in them, so even if we have two separate windows that happen to have the same properties, our `swin1` object has a unique hash.

We still need a few objects before we can create our scene. Next is the observer. We have to define what type of observation we want to connect to this scene - this is (for now) mostly for the purposes of radiative transfer computations which produce different outputs, depending on the observer type. If we want to use measurements from a space-based instrument, we can use the `SatelliteObserver` type:

```{julia}
observer = G3RT.SatelliteObserver(
    1.0, # Viewing zenith
    110.0, # Viewing azimuth
    zeros(3), # Satellite velocity
    zeros(3) # Satellite position
)
```

We fill these in with some plausible values. Note that the satellite velocity and satellite position fields are currently unused, so we can safely fill them with zeros. Here we also want to point users the G3RT documentation about the problematic ambiguities regarding angular units: [link to g3rt doc]. All angular units, such as zenith and azimuth angles, should be entered as degrees without any `Unitful` units attached to them as to avoid any implicit unwanted unit conversions between degrees and radians.

:::{.callout-warning}
Be aware of implicit angular unit conversions when using `Unitful` degree units!
:::

The next required object is a location, and for this exercise we opt for an `EarthLocation` type, which describes the position on Earth at which the instrument points. Currently, these Earth locations are considered to be point-like, meaning that they do not have any spatial extent. This notion is consistent with the utilized 1-dimensional radiative transfer, so any location represents some idea of a mean atmospheric and surface state of the area covered by the field-of-view of the ground footprint.

```{julia}
location = G3RT.EarthLocation(
    16.3713,
    48.2081,
    200.0,
    u"m"
)
```

The last separate object needed is a simple `DateTime`, which is an object type that is part of the Julia standard library to represent a time. It requires loading in a module first, however:

```{julia}
using Dates
time = DateTime("2025-02-19T13:00:00")
```

Again, we picked an arbitrary date. So far, the only function which needs this particular data (`EarthScene.time`) is a function that can calculate the solar Doppler shift between the sun and the Earth location (if needed).